#!/bin/bash
#
# Copyright (C) 2024 Matteo Fioriti
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#Decommenta per Debug
#set -x

#Setup preliminare
ORARIO=`date`
DIRCONF="/etc/firewallo"
DIRBIN="/usr/local/firewallo/bin"
DIRLIB="/usr/local/firewallo/lib"
source $DIRCONF/firewallo.conf
source $DIRLIB/firewallo.lib
source $DIRLIB/wiz.lib
source $DIRLIB/filter.lib

EDITOR="nano" #setta qui l'editor vi o nano se è vuoto usa vi

if [ "$EDITOR" = "" ] ; then
	EDITOR="vi"
elif [ "$EDITOR" = "nano" ] ; then
	EDITOR="nano"
elif [ "$EDITOR" = "vi" ] ; then
	EDITOR="vi"
fi

# Carica il file di traduzione
load_translations() {
    local lang_file="$DIRCONF/lang/firewallo.lang.$LANG"
    if [[ -f "$lang_file" ]]; then
        source "$lang_file"
    else
        echo "LANG_NOT_FOUND"
        exit 1
    fi
}

#Funzione che apre in editor il contenuto di /etc/network/interfaces 
networking () {
		$EDITOR /etc/network/interfaces
}

#Funziona che apre in editor il file /etc/sysctl.conf
sysctl  () {
    	$EDITOR /etc/sysctl.conf
}

#Funzione che apre in editor il file di conf fi firewallo
conf () {
  		$EDITOR $DIRCONF/firewallo.conf
}

#Funzione di editing del table Filter
filter () {

banner_show #Visualizza il banner
echo " --- FILTER MENU ---"
MENU="
fw2fw	fw2lan		fw2wan		fw2vpns		fw2dmz		\
lan2fw	lan2lan		lan2wan		lan2vpns 	lan2dmz  	\
wan2fw	wan2lan		wan2wan		wan2vpns 	wan2dmz   	\
vpns2fw	vpns2lan	vpns2wan	vpns2vpns 	vpns2dmz 	\
dmz2fw	dmz2lan		dmz2wan		dmz2vpns 	dmz2dmz 	\
exit"

 
select opt in $MENU ; do
	if [ "$opt" = "exit" ] ; then
		main 
	else
        #Legge $opt
		read_variables "$opt"
		# Avvia la gestione delle porte
		manage_ports "$opt"
    fi 
done
}

#Funzione di editing manuale del table Nat
nat  () {
banner_show #Visualizza il banner 
show_wizard_nat
}

#Funzione di editing manuale del mangle
mangle  () {
		$EDITOR	$DIRCONF/mangle/firewallo.mangle
}

#Funzione di editing manuale del routing
route  () {
 		$EDITOR $DIRCONF/route/firewallo.route
}

#Funzione di start di Firewallo
start () {
check_process_firewallo || exit 1 ;
if  [ "$NFT" != "" ] ; then
/etc/init.d/firewallo.nft start
elif [ "$IPT" != "" ]  ; then
/etc/init.d/firewallo.iptables start
fi
}

#Funzione di stop di Firewallo
stop () {
check_process_firewallo || exit 1 ;
if  [ "$NFT" != "" ] ; then
/etc/init.d/firewallo.nft stop
elif [ "$IPT" != "" ] ; then
/etc/init.d/firewallo.iptables stop
fi

}

#Funzione di restart 
restart () {
check_process_firewallo || exit 1 ;
stop
start
}

#Funzione di reset 
reset () {
check_process_firewallo || exit 1 ;
if  [ "$NFT" != "" ] ; then
/etc/init.d/firewallo.nft reset
elif [ "$IPT" != "" ] ; then
/etc/init.d/firewallo.iptables reset
fi
}
#Funzione di visualizzazione dello status
status () {
less $DIRCONF/status.log
}

#Funzione di list delle regole 
rules () {
if [ "$IPT" != "" ]  ;then
	$IPT -t filter 	-L -vn > .filter
	$IPT -t nat 	-L -vn > .nat
	$IPT -t mangle 	-L -vn > .mangle
elif [ "$NFT" != "" ] ; then
	$NFT list ruleset > .ruleset
fi

if [ -e .filter ] ; then
	echo "##############IPTABLES RULES##################"
	cat .filter .nat .mangle | less
fi
if [ -e .ruleset ]  ; then
	echo "#################NFT RULESET##################"
	cat .ruleset | less
fi

rm .filter .nat .mangle .ruleset 2>/dev/null
main

#done
}

#Funzione di salvataggio della configurazione di iptables/nftables ed enable del servizio su systemd
saveconf () {
restart #Mi assicuro che il firewall sia startato se no che regole salvo.
if [ "$IPT" != "" ] ; then
	echo "$SAVECONF_IPT_NFT" 
	echo '
[Unit]
Description=Restore iptables rules
After=network.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c "/sbin/iptables-restore < /etc/iptables/rules.v4"
#ExecStartPost=/bin/bash -c "/sbin/ip6tables-restore < /etc/iptables/rules.v6"
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
'> /etc/systemd/system/iptables-restore.service #Ok metto su systemd il restore di iptables
	systemctl daemon-reload
	systemctl disable nftables.service
	systemctl enable  iptables-restore.service
	        if  [ ! -e /etc/iptables ]  ; then #Controllo che /etc/iptables ci sia 
            mkdir /etc/iptables/
            fi 
    iptables-save > /etc/iptables/rules.v4
	chmod 644 /etc/iptables/rules.v4
	echo "Press Any key to continue ...."
    read OK
elif [ "$NFT" != ""  ] ; then
	    echo "Save Conf to /etc/nftables.conf and enable nftables at startup."
	    systemctl disable iptables-restore.service
	    systemctl enable nftables.service
	    nft list ruleset > /etc/nftables.conf
		echo "Press Any key to continue ...."
		read OK
fi
}

#Funzione di switch del backend nft/iptables
nftiptables () {
echo "$SELECT_IPT_OR_NFT"
MENU1="iptables nftables"
opt1=""
select opt1 in $MENU1 ; do
        if [ "$opt1" = "nftables" ] ; then #se selezioni nft
        export IPT=""; #Svuoto IPT
		export NFT="/usr/sbin/nft" #Setto NFT
        /etc/init.d/firewallo.iptables reset # Elimino tutte le regole
		sed -i 's/IPT=\"\/sbin\/iptables\"//g'  $DIRCONF/firewallo.conf #vuoto iptables in firewallo.conf
		sed -i 's/NFT=\"\/usr\/sbin\/nft\"//g'  $DIRCONF/firewallo.conf #vuoto anche nft 
		printf 'NFT=\"/usr/sbin/nft\"' >> $DIRCONF/firewallo.conf #risetto nft
		update-alternatives --set iptables /usr/sbin/iptables-nft
		systemctl enable nftables.service
        echo "Press Any key to continue ...."
        read OK
		return
        elif [ "$opt1" = "iptables" ] ; then #Se selezioni iptables
        export NFT=""; #Svuoto NFT
		export IPT="/sbin/iptables" #Setto iptables
        /etc/init.d/firewallo.nft reset # Elimino tutte le regole
		sed -i 's/IPT=\"\/sbin\/iptables\"//g'  $DIRCONF/firewallo.conf #Vuoto iptables e anche nft
		sed -i 's/NFT=\"\/usr\/sbin\/nft\"//g'  $DIRCONF/firewallo.conf #
        printf 'IPT=\"/sbin/iptables\"' >> $DIRCONF/firewallo.conf #Setto iptables
		update-alternatives --set iptables /usr/sbin/iptables-legacy
		systemctl disable nftables.service
		systemctl enable  iptables-restore.service
		echo "Press Any key to continue ...."
        read OK
        return
        fi
done
}



# Funzione per monitorare i log con Ctrl+C che uccide solo journalctl
log_filter () { 
    banner_show #Visualizza il banner 

    echo "$SELECT_CHAIN_TO_VIEW"

    MENU=("fw2fw" "fw2lan" "fw2wan" "fw2vpns" "fw2dmz" 			\
          "lan2fw" "lan2lan" "lan2wan" "lan2vpns" "lan2dmz" 	\
          "wan2fw" "wan2lan" "wan2wan" "wan2vpns" "wan2dmz" 	\
          "vpns2fw" "vpns2lan" "vpns2wan" "vpns2vpns" "vpns2dmz"\
          "dmz2fw" "dmz2lan" "dmz2wan" "dmz2vpns" "dmz2dmz"  	\
		  "state" "icmp_good" "bad_tcp_flags" "nothing"			\
		  "POSTROUTING" "PREROUTING" "DROP" "OUTPUT_DROP"       \
          "INPUT_DROP" "FORWARD_DROP" "EXIT")

    
    select opt in "${MENU[@]}"; do
        if [ "$opt" = "EXIT" ]; then
            echo "Exit from filter."
            break  # Esci dal ciclo

        elif [ "$opt" = "nothing" ] && [ "$1" = "live" ]; then	
            # Mostra tutti i log in modalità live
            journalctl -k -f | less

        elif [ "$1" = "live" ] && [ "$opt" != "nothing" ]; then
            # Filtra i log live con grep
			echo "Logging $1 $opt --- Press Ctrl+C to exit"
            journalctl -k -f | grep $opt &  # Esegui in background
            PID=$!  # Salva il PID
            trap "echo 'Exit From Log ...'; kill $PID" SIGINT  # Cattura Ctrl+C
            wait $PID  # Aspetta che il processo termini
			main
        elif [ "$1" != "live" ] && [ "$opt" != "nothing" ]; then
            # Mostra i log dall'inizio di una determinata data
            journalctl -k --since "$1" | grep $opt | less

        elif [ "$1" != "live" ] && [ "$opt" = "nothing" ]; then
            # Mostra tutti i log dall'inizio di una determinata data
            journalctl -k --since "$1" | less
        fi
    done
}

# Funzione per selezionare il tipo di log
logs () {
    banner_show #Visualizza il banner

    echo "$SELECT_LOG_TYPE"
    MENU1=("EXIT" "live" "1 week ago" "1 day ago" "1 hour ago" "1 minute ago" )
    
    select opt1 in "${MENU1[@]}"; do
		if [ "$opt1" = "EXIT" ] ; then
			main
		else
        log_filter "$opt1"
		fi
    done
}

show_netdpi () {
banner_show #Visualizza il banner
function show_menu {
    echo ""
    echo "======================================"
    echo "  Network Deep Packet Inspection      "
    echo "======================================"
    echo "1) Protocol block"
    echo "2) Network dpi Filter"
    echo "q) Exit"
    echo "======================================"
    echo -n "Select an option: "
}

# Funzioni per le diverse opzioni
#function filter_wizard {
#    $DIRBIN/wiz/magic_filter.sh
#}

function suricata_wizard {
    $DIRBIN/wiz/magic_suricata.sh ;
}

function dpi_wizard {
    $DIRBIN/wiz/magic_dpi.sh ;
}

#function wg_manager_wizard {
#    $DIRBIN/wiz/wg/wg_manager.sh
#}



# Ciclo principale del menu
while true
do
    banner_show #Visualizza il banner
    show_menu
    read option

    case $option in
        1)
            banner_show #Visualizza il banner
            suricata_wizard
            ;;
        2)
            banner_show #Visualizza il banner 
            dpi_wizard
            ;;
        q)
            echo "Exit"
            break
            ;;
        *)
            echo "Select right Option!."
            ;;
    esac

    # Pausa per permettere la lettura del messaggio
    echo -n "Press Enter to continue..."
    read
done
}

show_wizard_nat () {
banner_show #Visualizza il banner
function show_menu_nat {
    echo " "
    echo "======================================"
    echo "           FIREWALLO NAT  "
    echo "======================================"
    echo "1) Nat Prerouting Wizard"
    echo "2) Nat Postrouting Wizard"
    echo "3) Manual Edit File "
    echo "q) Exit"
    echo "======================================"
    echo -n "Select an option: "
}

# Funzioni per le diverse opzioni
function nat_prerouting_wizard {
    banner_show #Visualizza il banner 
	$DIRBIN/wiz/magic_nat_prerouting.sh
}

function nat_postrouting_wizard {
    banner_show #Visualizza il banner 
	$DIRBIN/wiz/magic_nat_postrouting.sh
}
function edit_manual_nat {
	$EDITOR $DIRCONF/nat/firewallo.nat
}

# Ciclo principale del menu
while true
do
    show_menu_nat
    read option_nat

    case $option_nat in
        1)  nat_prerouting_wizard
            ;;
        2)  nat_postrouting_wizard
            ;;
	    3)  edit_manual_nat
	        ;;
	    q)  echo "Exit" # da testare se funziona
            break
            ;;
        *)  echo "Select right Option!."
            ;;
    esac

    # Pausa per permettere la lettura del messaggio
    echo -n "Press Enter to continue..."
    read
done
}
export_conf () {
    # Imposta la variabile per la data e l'ora corrente nel formato YYYYMMDD-HHMMSS
    local data_odierna_ora=$(date +"%Y%m%d-%H%M%S")

    # Nome del file tar.gz
    local nome_file="firewallo-conf-${data_odierna_ora}.tar.gz"

    # Crea il backup della directory /etc/firewallo nella directory corrente
    tar -czf "$nome_file" /etc/firewallo

    # Verifica se il comando tar ha avuto successo
    if [[ $? -eq 0 ]]; then
        echo " $(pwd)/$nome_file"
        echo "Press Any key to continue ...."
        read OK
    else
        echo "$ERROR_BCK"
        echo "Press Any key to continue ...."
        read OK
    fi

}
restore_conf() {
    # Cerca i file di backup chiamati firewallo-conf-*.tar.gz nella directory corrente
    local files=($(ls firewallo-conf-*.tar.gz 2>/dev/null))

    # Se non ci sono file di backup, informa l'utente e termina la funzione
    if [[ ${#files[@]} -eq 0 ]]; then
        echo "$NO_BACKUP"
        return 1
    fi

    # Mostra un menu con i file trovati
    echo "$SELECT_FILE_RESTORE"
    for i in "${!files[@]}"; do
        echo "$((i+1)). ${files[$i]}"
    done

    # Chiede all'utente di scegliere un'opzione
    read -p "$SELECT_NUMBER_BCK" scelta

    # Verifica che l'input sia valido
    if ! [[ "$scelta" =~ ^[0-9]+$ ]] || ((scelta < 1 || scelta > ${#files[@]})); then
        echo "$INVALID_SELECTION_MSG"
        return 1
    fi

    # Ottiene il nome del file selezionato
    local file_selezionato="${files[$((scelta-1))]}"

    # Chiede conferma all'utente
    read -p "$CONFIRM_RESTORE" conferma

    if [[ "$conferma" != "s" && "$conferma" != "S" && "$conferma" != "y" && "$conferma" != "Y" ]]; then
        echo "$RESTORE_ABORT"
        return 1
    fi

    # Estrae il file di backup sovrascrivendo la directory /etc/firewallo
    sudo tar -xzf "$file_selezionato" -C /etc

    # Verifica se il comando tar ha avuto successo
    if [[ $? -eq 0 ]]; then
        echo "$RESTORED_OK $file_selezionato"
        echo "Press Any key to continue ...."
        read OK
    else
        echo "$RESTORE_ERROR"
        echo "Press Any key to continue ...."
        read OK
        return 1
    fi
}

#Funzione principale
main () {
banner_show 
echo "EDITOR: $EDITOR --- MENU MAIN ---"
if [[ "$NFT" = "" && "$IPT" = "" ]] ;then
	echo "INTERNAL ERROR: You must set Backend select iptables o nftables"
fi

#Opzioni del menu
MENU="networking sysctl conf filter nat mangle start stop restart reset route networkdpi status rulesview saveconf nft-iptables logs export_conf restore_conf exit"
select opt in $MENU ; do 
	if [ "$opt" = "networking" ] ; then
		networking ;  main
	elif [ "$opt" = "conf" ] ; then
		conf ; main
	elif [ "$opt" = "sysctl" ] ; then
        sysctl ; main
	elif [ "$opt" = "filter" ] ; then
        filter ; main
    elif [ "$opt" = "nat" ] ; then
        nat ; main
	elif [ "$opt" = "mangle" ] ; then
        mangle ; main
	elif [ "$opt" = "start" ] ; then
        start ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main #starto attendo e leggo invio per tornare
	elif [ "$opt" = "stop" ] ; then
        stop ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main #idem come sopra
	elif [ "$opt" = "restart" ] ; then 
        restart ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main #idem come sopra
    elif [ "$opt" = "reset" ] ; then 
        reset ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main #idem come sopra
	elif [ "$opt" = "route" ] ; then
        route ; main
	elif [ "$opt" = "status" ] ; then
        status ; main
	elif [ "$opt" = "rulesview" ] ; then
        rules ; main
    elif [ "$opt" = "saveconf" ] ; then
        saveconf ; main
    elif [ "$opt" = "nft-iptables" ] ; then
        nftiptables ; main
	elif [ "$opt" = "logs" ] ; then
        logs ; main
	elif [ "$opt" = "networkdpi" ] ; then
		show_netdpi ; main
    elif [ "$opt" = "export_conf" ] ; then
		export_conf ; main 
    elif [ "$opt" = "restore_conf" ] ; then
		restore_conf ; main 
	elif [ "$opt" = "exit" ] ; then
        echo ByeZzZ.
		exit
	fi
done
}

# Definisco altezza e larghezza
rows=30
cols=100
# Ridimensiono il terminale
echo -e "\e[8;${rows};${cols}t"
#Lancio finalmente il main in stile C
main
