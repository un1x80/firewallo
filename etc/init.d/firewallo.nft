#!/bin/bash
#set -x
ORARIO=`date`
DIRCONF="/etc/firewallo"
DIRBIN="/usr/local/firewallo/bin"
DIRLIB="/usr/local/firewallo/lib"
source $DIRCONF/firewallo.conf
source $DIRLIB/firewallo.lib

#Dichiaro gli array delle varie interfacce
ctrl_if(){
#Vedo se la variabile è dichiarata come array e se no la dichiaro
ARRAYTEST=$(declare -p WANIF 2> /dev/null | grep  "declare \-a")
if [ "$ARRAYTEST" = "" ] ; then
	WANIF=($WANIF)
	echo "WANIF ARRAY DECLARED $(green_check_mark)" 
fi
index=0
for i in ${WANIF[*]} ; do
	((index++))
    export 	WANIF_$index="$i"
	echo "WANIF_$index=$i"
    #declare -p WANIF_$index 2> /dev/null
done
echo "WANIF TOT: $index
_______________________"

ARRAYTEST=$(declare -p DMZIF 2> /dev/null | grep  "declare \-a")
if [ "$ARRAYTEST" = "" ] ; then
	DMZIF=($DMZIF)
	echo "DMZIF ARRAY DECLARED $(green_check_mark)" 
fi
index=0
for i in ${DMZIF[*]} ; do
    ((index++))
	export  DMZIF_$index="$i"
	echo "DMZIF_$index=$i"
	#declare -p DMZIF_$index 2> /dev/null 
done
echo "DMZIF TOT: $index
_______________________"


ARRAYTEST=$(declare -p LANIF 2> /dev/null | grep  "declare \-a")
	if [ "$ARRAYTEST" = "" ] ; then
	LANIF=($LANIF)
	echo "LANIF ARRAY DECLARED $(green_check_mark)" 
	fi
index=0
for i in ${LANIF[*]} ; do
    ((index++))
	export  LANIF_$index="$i"
	echo "LANIF_$index=$i"
	#declare -p LANIF_$index 2> /dev/null 
done
echo "LANIF TOT: $index 
_______________________"

echo "Interface Attributions:"
echo "LANIF = ${LANIF[@]}"
echo "WANIF = ${WANIF[@]}"
echo "DMZIF = ${DMZIF[@]}"
echo "_______________________"
}



start () {
#Attribuzione delle interfacce
echo "### $ORARIO Start Firewall"

#Eseguo lo script per le rotte (parte che non comptete propriamente al firewall ma introdotta per scelta storica)
/bin/bash 	$DIRCONF/route/firewallo.route

#Abilita il forwarding se non lo è già
if [ -e /proc/sys/net/ipv4/ip_forward ] ; 			then
    echo 1 > /proc/sys/net/ipv4/ip_forward
fi

if [ -e /proc/sys/net/ipv4/ip_dynaddr ] ; 			then
    echo 1 > /proc/sys/net/ipv4/ip_dynaddr
fi

if [ -e /proc/sys/net/ipv4/tcp_syncookies ] ; 			then
    echo 1 > /proc/sys/net/ipv4/tcp_syncookies
fi

if [ -e /proc/sys/net/ipv4/conf/all/accept_source_route ] ; 	then
    echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
fi


echo "Flushing policies and setting up new policies for chains...... "
#Replica della struttura classica di ipatbles 
$NFT "flush ruleset"
$NFT "add table ip filter"
$NFT "add chain ip filter INPUT { type filter hook input priority 0; policy drop; }"
$NFT "add chain ip filter FORWARD { type filter hook forward priority 0; policy drop;}"
$NFT "add chain ip filter OUTPUT { type filter hook output priority 0; policy drop; }"

$NFT "add rule ip filter INPUT  iifname "lo" counter accept"
$NFT "add rule ip filter OUTPUT oifname "lo" counter accept"

CHAINS="icmp_good tcp_flags stato dnserv 	    \
lan2wan lan2dmz lan2lan lan2vpns lan2fw 	    \
wan2wan wan2dmz wan2lan wan2vpns wan2fw 	    \
dmz2wan dmz2dmz dmz2lan dmz2vpns dmz2fw 	    \
fw2wan fw2dmz fw2lan fw2vpns fw2fw		        \
vpns2wan vpns2dmz vpns2lan vpns2vpns vpns2fw dpi";

for CAT in $CHAINS ; do
    $NFT "add chain ip filter $CAT" ;
done

#Setup Chain and conf in nat and mangle tables
/bin/bash $DIRBIN/mangle/set.mangle
/bin/bash $DIRBIN/nat/set.nat

#Setup rules in nat and mangle tables
/bin/bash $DIRCONF/mangle/firewallo.mangle
/bin/bash $DIRCONF/nat/firewallo.nat

#Setup dpi suricata rules
if [ "$NFT" != "" ] ; then
/bin/bash $DIRCONF/filter/dpi
fi

############################
$NFT "add rule ip filter dpi ip protocol tcp queue num 0 bypass "
$NFT "add rule ip filter stato ct state related,established 									log prefix \"ACCEPT state related-established:\"	counter accept"
$NFT "add rule ip filter stato ct state related 												log prefix \"ACCEPT state related :\"          	counter accept"
$NFT "add rule ip filter stato ct state established 											log prefix \"ACCEPT state established:\" 		counter accept"

$NFT "add rule ip filter tcp_flags tcp flags fin,psh,urg / fin,syn,rst,psh,ack,urg 				log prefix \"DROP PortScanX-mas:\" 			counter drop "
$NFT "add rule ip filter tcp_flags tcp flags fin,syn,rst,ack,urg / fin,syn,rst,psh,ack,urg 		log prefix \"DROP PortScanX-mas:\" 			counter drop"
$NFT "add rule ip filter tcp_flags tcp flags fin,syn,rst,psh,ack,urg / fin,syn,rst,psh,ack,urg 	log prefix \"DROP PortScanX-mas:\" 			counter drop"
$NFT "add rule ip filter tcp_flags tcp flags fin / fin,syn,rst,psh,ack,urg 						log prefix \"DROP PortScan:\" 				counter drop"
$NFT "add rule ip filter tcp_flags tcp flags syn,rst / syn,rst 									log prefix \"DROP PortScanX-mas:\" 			counter drop"
$NFT "add rule ip filter tcp_flags tcp flags fin,syn / fin,syn 									log prefix \"DROP PortScanX-mas:\" 			counter drop"
$NFT "add rule ip filter tcp_flags tcp flags 0x0 / fin,syn,rst,psh,ack,urg 						log prefix \"DROP PortScanX-mas:\" 			counter drop"

$NFT "add rule ip filter dnserv ip saddr $LO  tcp dport 53										log prefix \"ACCEPT dnserv $LO :\" 			counter accept"
$NFT "add rule ip filter dnserv ip daddr $LO  tcp dport 53										log prefix \"ACCEPT dnserv $LO :\" 			counter accept"

$NFT "add rule ip filter dnserv ip daddr $LO  tcp sport 53										log prefix \"ACCEPT dnserv $LO :\" 			counter accept"
$NFT "add rule ip filter dnserv ip saddr $LO  tcp sport 53										log prefix \"ACCEPT dnserv $LO :\" 			counter accept"

for dns in $DNS1 $DNS2 $DNS3 $DNS4; do
    if ! [[ $dns =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Error: Invalid DNS address $dns"
        exit 1
	else
		        add_dns_rules_nft $dns
	fi
done

#ELENCO CONTROLLATO IL 10/09/2024
ROOTSERV="198.41.0.4 199.9.14.201 192.33.4.12 199.7.91.13 192.203.230.10 192.5.5.241 192.112.36.4 198.97.190.53 192.36.148.17 192.58.128.30 193.0.14.129 199.7.83.42 202.12.27.33"
for i in $ROOTSERV ; do
$NFT "add rule ip filter dnserv ip saddr $i tcp dport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
$NFT "add rule ip filter dnserv ip daddr $i tcp dport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
$NFT "add rule ip filter dnserv ip saddr $i udp dport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
$NFT "add rule ip filter dnserv ip daddr $i udp dport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"

$NFT "add rule ip filter dnserv ip saddr $i tcp sport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
$NFT "add rule ip filter dnserv ip daddr $i tcp sport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
$NFT "add rule ip filter dnserv ip saddr $i udp sport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
$NFT "add rule ip filter dnserv ip daddr $i udp sport 53   									log prefix \"ACCEPT dnserv rootsrv $i :\" 		counter accept"
done

#####################
######ICMP RULEZ#####
#####################
ICMPaccept="destination-unreachable source-quench time-exceeded parameter-problem"

for ICMP in $ICMPaccept ; do
$NFT "add rule ip filter icmp_good icmp type $ICMP   										log prefix \"ACCEPT icmp_good :\" 				counter accept" 
done

$NFT "add rule ip filter icmp_good icmp type echo-request   								log prefix \"ACCEPT icmp_good :\" 				counter accept"
$NFT "add rule ip filter icmp_good icmp type echo-reply    									log prefix \"ACCEPT icmp_good :\" 				counter accept"
#limit rate 90/minute burst 5 packets counter accept


#FILTER CHAINS ATTRIBUTION IN FORWARD
#$NFT "add rule ip filter FORWARD counter jump dpi"			###
$NFT "add rule ip filter FORWARD counter jump stato"		###
$NFT "add rule ip filter FORWARD counter jump dnserv"		###
$NFT "add rule ip filter FORWARD counter jump icmp_good"	###
$NFT "add rule ip filter FORWARD counter jump tcp_flags"	###
$NFT "add rule ip filter FORWARD iifname lo log prefix \"ACCEPTED FORWARD localhost : \" 	counter accept" ### Fire 2 All forward

#LAN 2 -> XXX
    	for lanifs in ${LANIF[*]} ; do
		for lanifs1 in ${LANIF[*]} ; do
		$NFT "add rule ip filter FORWARD	iifname $lanifs 	oifname $lanifs1 	counter jump lan2lan"      ### Lan 2 Lan forward
    		done
	done
	 for lanifs in ${LANIF[*]} ; do
                for wanifs in ${WANIF[*]} ; do
                $NFT "add rule ip filter FORWARD	iifname $lanifs     oifname $wanifs    counter jump lan2wan"      ### Lan 2 Lan forward
                done
    	done
	for lanifs in ${LANIF[*]} ; do
		for dmzifs in ${DMZIF[*]} ; do
		$NFT "add rule ip filter FORWARD	iifname $lanifs 	oifname $dmzifs 	counter jump lan2dmz"      ### Lan 2 Dmz forward
		done
	done
#WAN 2 -> XXX
	for wanifs in ${WANIF[*]} ; do
		for lanifs in ${LANIF[*]} ; do
		$NFT "add rule ip filter FORWARD	iifname $wanifs 	oifname $lanifs 	counter jump wan2lan"	### Wan 2 Lan forward
		done
	done
	 for wanifs in ${WANIF[*]} ; do
                for dmzifs in ${DMZIF[*]} ; do
    		$NFT "add rule ip filter FORWARD	iifname $wanifs 	oifname $dmzifs 	counter jump wan2dmz"      ### Wan 2 Dmz forward
    		done
	done
	for wanifs in ${WANIF[*]} ; do
		for wanifs1 in ${WANIF[*]} ; do
		$NFT "add rule ip filter FORWARD	iifname $wanifs 	oifname $wanifs1 	counter jump wan2wan"      ### Wan 2 Wmz forward
		done
	done
#DMZ 2 -> XXX
	for dmzifs in ${DMZIF[*]} ; do
 		for lanifs in ${LANIF[*]} ; do
  		$NFT "add rule ip filter FORWARD	iifname $dmzifs 	oifname $lanifs 	counter jump dmz2lan"	### Dmz 2 Lan forward
		done
	done
	for dmzifs in ${DMZIF[*]} ; do
		for dmzifs1 in ${DMZIF[*]} ; do
		$NFT  "add rule ip filter FORWARD	iifname $dmzifs 	oifname $dmzifs1 	counter jump dmz2dmz"      ### Dmz 2 Dmz forward
    		done
	done
	for dmzifs in ${DMZIF[*]} ; do
		for wanifs in ${WANIF[*]} ; do
		$NFT "add rule ip filter FORWARD iifname $dmzifs 	oifname $wanifs 	counter jump  dmz2wan"      ### Dmz 2 Wan forward
		done
	done

#FILTER CHAINS ATTRIBUTION IN INPUT
    $NFT "add rule ip filter INPUT 	counter jump stato"
    $NFT "add rule ip filter INPUT  counter jump dnserv"
    $NFT "add rule ip filter INPUT 	counter jump icmp_good"
    $NFT "add rule ip filter INPUT 	counter jump tcp_flags"
    $NFT "add rule ip filter INPUT iifname \"lo\" log prefix \"ACCEPT INPUT localhost : \" 	counter accept"
    for lanifs in ${LANIF[*]} ; do
	$NFT "add rule ip filter INPUT iifname $lanifs      counter jump  lan2fw"	### Lan input to firewall
    done
    for wanifs in ${WANIF[*]} ; do
	$NFT "add rule ip filter INPUT iifname $wanifs 		counter jump wan2fw"	### Wan input to firewall
    done
    for dmzifs in ${DMZIF[*]} ; do
    	$NFT "add rule ip filter INPUT iifname $dmzifs	counter jump dmz2fw"	### Dmz input to firewall
    done
    #FILTER CHAINS ATTRIBUTION IN INPUT
    $NFT "add rule ip filter OUTPUT counter jump stato"
    $NFT "add rule ip filter OUTPUT counter jump dnserv"
    $NFT "add rule ip filter OUTPUT counter jump icmp_good"
    $NFT "add rule ip filter OUTPUT counter jump tcp_flags"
    $NFT "add rule ip filter OUTPUT oifname \"lo\" log prefix \"ACCEPTED OUTPUT localhost : \" counter accept"
    for dmzifs in ${DMZIF[*]} ; do
	$NFT "add rule ip filter OUTPUT oifname $dmzifs	counter jump fw2dmz"     	### Fire output to dmz
    done
    for lanifs in ${LANIF[*]} ; do
	$NFT "add rule ip filter OUTPUT oifname $lanifs	counter jump fw2lan"    	### Fire output to lan
    done
    for wanifs in ${WANIF[*]} ; do
    	$NFT "add rule ip filter OUTPUT oifname $WANIF	counter jump fw2wan"     	### Fire output to wan
    done

    #VPN CHAINS ATTRIBUTION
    #VPN 2 -> XXX
    #XXX 2 -> VPN
    for lanifs in ${LANIF[*]} ; do
    	for vpnsif in $VPNIF ; do
    	$NFT "add rule ip filter FORWARD iifname $lanifs       oifname $vpnsif 	 counter jump lan2vpns"	###
    	$NFT "add rule ip filter FORWARD iifname $vpnsif       oifname $lanifs 	 counter jump vpns2lan"	###
	done
    done
    for dmzifs in ${DMZIF[*]} ; do
	for vpnsif in $VPNIF ; do
		$NFT "add rule ip filter FORWARD iifname $dmzifs       oifname $vpnsif 	 counter jump dmz2vpns"	###
        $NFT "add rule ip filter FORWARD iifname $vpnsif       oifname $dmzifs 	 counter jump vpns2dmz"	###
	done
    done
    for wanifs in ${WANIF[*]} ; do
	for vpnsif in $VPNIF ; do
    	$NFT "add rule ip filter FORWARD iifname $wanifs       oifname $vpnsif 	 counter jump wan2vpns"	###
    	$NFT "add rule ip filter FORWARD iifname $vpnsif       oifname $wanifs 	 counter jump vpns2wan"	###
	done
    done

    for vpnsif in $VPNIF ; do
    	$NFT "add rule ip filter INPUT       iifname $vpnsif	 counter jump vpns2fw"	###
		$NFT "add rule ip filter OUTPUT      oifname $vpnsif	 counter jump fw2vpns"	###
    done
    for vpnsif in $VPNIF ; do
    	for vpnsif1 in $VPNIF ; do
    	$NFT  "add rule ip filter FORWARD 	iifname $vpnsif1        oifname $vpnsif counter jump vpns2vpns"	###
       	done
    done
	

#STAR DELLE REGOLE
CHAINS0="lan2wan lan2dmz lan2lan lan2vpns lan2fw \
wan2wan wan2dmz wan2lan wan2vpns wan2fw          \
dmz2wan dmz2dmz dmz2lan dmz2vpns dmz2fw          \
fw2wan fw2dmz fw2lan fw2vpns fw2fw               \
vpns2wan vpns2dmz vpns2lan vpns2vpns vpns2fw     ";

for CAT0 in $CHAINS0 ; do
/bin/bash $DIRBIN/filter/set.filter "$DIRCONF/filter/$CAT0" "$DIRCONF/firewallo.conf" "$CAT0"
done
###LOG DROP BY POLICY
$NFT "add rule ip filter INPUT 		log prefix \"INPUT_DROP : \" 	flags all"
$NFT "add rule ip filter FORWARD 	log prefix \"FORWARD_DROP : \" 	flags all"
$NFT "add rule ip filter OUTPUT 	log prefix \"OUTPUT_DROP : \" 	flags all"
###LOG DROP BY POLICY
echo "Firewall setting are finish...                                  ...OK"
}


stop () {
########################################################################
#################################STOP###################################
########################################################################

$NFT "flush ruleset"

echo "Setting up policies for chains..."
#FILTER
$NFT "add table ip filter"
$NFT "add chain ip filter INPUT { type filter hook input priority 0; policy accept; }"
$NFT "add chain ip filter OUTPUT { type filter hook input priority 0; policy accept; }"
$NFT "add chain ip filter FORWARD { type filter hook input priority 0; policy accept; }"
#NAT
$NFT "add table ip nat"
$NFT "add chain ip nat PREROUTING { type nat hook prerouting priority -100; policy accept; }"
$NFT "add chain ip nat INPUT { type nat hook input priority 100; policy accept; }"
$NFT "add chain ip nat OUTPUT { type nat hook output priority -100; policy accept; }"
$NFT "add chain ip nat POSTROUTING { type nat hook postrouting priority 100; policy accept; }"
$DIRBIN/nat/set.nat

echo "Firewall stopped...                                           ...OK"
echo "##############END STOP################"
}

reset () {
echo "############## RESET FIREWALL##########"
echo "Flushing policies..."
$NFT "flush ruleset"


echo "Setting up policies for chains..."
$NFT "add chain ip filter INPUT { type filter hook input priority 0; policy accept; }"
$NFT "add chain ip filter OUTPUT { type filter hook input priority 0; policy accept; }"
$NFT "add chain ip filter FORWARD { type filter hook input priority 0; policy accept; }"
echo "Firewall resetted...                                           ...OK"
echo "##############END RESET################"
}


case "$1" in
   'start')
	ctrl_if ""
	printf "\nStarting firewall..."
				#Scrivo qualche appunto xchè non lo uso frequentemente.
				#>(...) è una process substitution che crea un processo secondario.
				#tee /tmp/.check_error copia l'output di errore nel file /tmp/.check_error.
				#>&2 assicura che l'output di tee venga reindirizzato nuovamente a stdout, quindi verrà stampanto in status.log
				#questo per avere l'errore dentro status.log a terminale e anche su .check_error per il red_cross_check.
	start "" > $LOGF 2> >(tee /tmp/.check_error >&1)
	if [ "$?" = "0" ] ; then
	printf "... ok $(green_check_mark)\n"
		#Controlla se ci sono errori nonostante lo start
		CHECK=$(cat /tmp/.check_error)
		if [ "$CHECK" != "" ] ; then
			echo "$(red_cross_mark) Started with configuration errors listed below see Option n°13 for complete Status!"
			color_text "red" "$CHECK"
		fi
	else
	printf "... error $(red_cross_mark)\n"
	fi
;;
   'stop')
	printf "\nTerminating firewall..."
				#Scrivo qualche appunto xchè non lo uso frequentemente.
				#>(...) è una process substitution che crea un processo secondario.
				#tee /tmp/.check_error copia l'output di errore nel file /tmp/.check_error.
				#>&2 assicura che l'output di tee venga reindirizzato nuovamente a stdout, quindi verrà stampanto in status.log
				#questo per avere l'errore dentro status.log a terminale e anche su .check_error per il red_cross_check.
	stop "" > $LOGF 2> >(tee /tmp/.check_error >&1)
	if [ "$?" = "0" ] ; then
	printf "... ok $(green_check_mark)\n"
		#Controlla se ci sono errori nonostante lo start
		CHECK=$(cat /tmp/.check_error)
		if [ "$CHECK" != "" ] ; then
			echo "$(red_cross_mark) Stopped with configuration errors listed below see Option n°13 for complete Status!"
			color_text "red" "$CHECK"
		fi
	else
	printf "... error $(red_cross_mark)\n"
	fi
;;
    'restart')
    $0 stop  >  $LOGF  2>&1
    $0 start >> $LOGF  2>&1
;;
    'reset')
	printf "\nResetting firewall..."
	reset ""   > $LOGF  2>&1
	printf "... ok $(green_check_mark)\n"
;;
   *)
    printf "usage $0 start|stop|restart|reset" ;;
esac
