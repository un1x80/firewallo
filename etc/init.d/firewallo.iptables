#!/bin/bash
#
# Copyright (C) 2024 Matteo Fioriti
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#set -x
ORARIO=`date`
DIRCONF="/etc/firewallo"
DIRBIN="/usr/local/firewallo/bin"
DIRLIB="/usr/local/firewallo/lib"
source $DIRCONF/firewallo.conf
source $DIRLIB/firewallo.lib

#Dichiaro gli array delle varie interfacce
ctrl_if(){
#Vedo se la variabile Ã¨ dichiarata come array e se no la dichiaro
ARRAYTEST=$(declare -p WANIF 2> /dev/null | grep  "declare \-a")
if [ "$ARRAYTEST" = "" ] ; then
	WANIF=($WANIF)
	echo "WANIF ARRAY DECLARED $(green_check_mark)" 
fi
index=0
for i in ${WANIF[*]} ; do
	((index++))
    export 	WANIF_$index="$i"
	echo "WANIF_$index=$i"
    #declare -p WANIF_$index 2> /dev/null
done
echo "WANIF TOT: $index
_______________________"

ARRAYTEST=$(declare -p DMZIF 2> /dev/null | grep  "declare \-a")
if [ "$ARRAYTEST" = "" ] ; then
	DMZIF=($DMZIF)
	echo "DMZIF ARRAY DECLARED $(green_check_mark)" 
fi
index=0
for i in ${DMZIF[*]} ; do
    ((index++))
	export  DMZIF_$index="$i"
	echo "DMZIF_$index=$i"
	#declare -p DMZIF_$index 2> /dev/null 
done
echo "DMZIF TOT: $index
_______________________"


ARRAYTEST=$(declare -p LANIF 2> /dev/null | grep  "declare \-a")
	if [ "$ARRAYTEST" = "" ] ; then
	LANIF=($LANIF)
	echo "LANIF ARRAY DECLARED $(green_check_mark)" 
	fi
index=0
for i in ${LANIF[*]} ; do
    ((index++))
	export  LANIF_$index="$i"
	echo "LANIF_$index=$i"
	#declare -p LANIF_$index 2> /dev/null 
done
echo "LANIF TOT: $index 
_______________________"

echo "Interface Attributions:"
echo "LANIF = ${LANIF[@]}"
echo "WANIF = ${WANIF[@]}"
echo "DMZIF = ${DMZIF[@]}"
echo "_______________________"
}


start () {
echo "### $ORARIO Start Firewall"

#Avviamo le rotte
/bin/bash 	$DIRCONF/route/firewallo.route


if [ -e /proc/sys/net/ipv4/ip_forward ] ; 			then
    echo 1 > /proc/sys/net/ipv4/ip_forward
fi
if [ -e /proc/sys/net/ipv4/ip_dynaddr ] ; 			then
    echo 1 > /proc/sys/net/ipv4/ip_dynaddr
fi
if [ -e /proc/sys/net/ipv4/tcp_syncookies ] ; 			then
    echo 1 > /proc/sys/net/ipv4/tcp_syncookies
fi
if [ -e /proc/sys/net/ipv4/conf/all/accept_source_route ] ; 	then
    echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
fi

#Ormai inutili
#MODULI="ip_conntrack ipt_conntrack ip_conntrack_ftp 	ip_nat_ftp 	ipt_state iptable_filter iptable_nat \
#ip_nat_pptp ip_conntrack_pptp ip_nat_sip ip_conntrack_sip	ipt_MASQUERADE 		ipt_LOG      \
#ipt_limit ipt_multiport ip_conntrack_netlink"

#for MOD in $MODULI ; do
#    /sbin/modprobe $MOD
#done

echo "Flushing policies and setting up new policies for chains...... "
$IPT -F
$IPT -X
$IPT -t nat 	-F
$IPT -t nat 	-X
$IPT -t filter 	-F
$IPT -t filter 	-X
$IPT -t mangle 	-F
$IPT -t mangle 	-X
$IPT -P INPUT 	DROP
$IPT -P FORWARD DROP
$IPT -P OUTPUT 	DROP

$IPT -A INPUT 	-i lo -j ACCEPT
$IPT -A OUTPUT 	-o lo -j ACCEPT

CHAINS="icmp_good tcp_flags stato dnserv 	\
lan2wan lan2dmz lan2lan lan2vpns lan2fw 	\
wan2wan wan2dmz wan2lan wan2vpns wan2fw 	\
dmz2wan dmz2dmz dmz2lan dmz2vpns dmz2fw 	\
fw2wan fw2dmz fw2lan fw2vpns fw2fw		\
vpns2wan vpns2dmz vpns2lan vpns2vpns vpns2fw	";

for CAT in $CHAINS ; do
    $IPT -N $CAT ;
done

#Setup Chain and conf in nat and mangle tables
/bin/bash $DIRBIN/mangle/set.mangle
/bin/bash $DIRBIN/nat/set.nat

#Setup rules in nat and mangle tables
/bin/bash $DIRCONF/mangle/firewallo.mangle
/bin/bash $DIRCONF/nat/firewallo.nat

############################


  $IPT -A tcp_flags -p tcp --tcp-flags ALL FIN,URG,PSH -j LOG --log-level warning --log-prefix "PortScanX-mas:"
  $IPT -A tcp_flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
 
  $IPT -A tcp_flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j LOG --log-level warning --log-prefix "PortScanX-mas:"
  $IPT -A tcp_flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

  $IPT -A tcp_flags -p tcp --tcp-flags ALL ALL -j LOG --log-level warning --log-prefix "PortScanX-mas:"
  $IPT -A tcp_flags -p tcp --tcp-flags ALL ALL -j DROP

  $IPT -A tcp_flags -p tcp --tcp-flags ALL FIN -j LOG --log-level warning --log-prefix "PortScan:"
  $IPT -A tcp_flags -p tcp --tcp-flags ALL FIN -j DROP

  $IPT -A tcp_flags -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-level warning --log-prefix "PortScanX-mas:"
  $IPT -A tcp_flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

  $IPT -A tcp_flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j LOG --log-level warning --log-prefix "PortScanX-mas:"
  $IPT -A tcp_flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  $IPT -A tcp_flags -p tcp --tcp-flags ALL NONE -j LOG --log-level warning --log-prefix "PortScanX-mas:"
  $IPT -A tcp_flags -p tcp --tcp-flags ALL NONE -j DROP

    $IPT -A stato -p all -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPT -A stato -p all -m state --state RELATED -j ACCEPT
    $IPT -A stato -p all -m state --state ESTABLISHED -j ACCEPT

    $IPT -A dnserv -p tcp -s $LO   --dport 53 -j ACCEPT
    $IPT -A dnserv -p udp -s $LO   --dport 53 -j ACCEPT

for dns in $DNS1 $DNS2 $DNS3 $DNS4; do
    if ! [[ $dns =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Error: Invalid DNS address $dns"
        exit 1
	else
		        add_dns_rules_ipt $dns
	fi
done


ROOTSERV="198.41.0.4 128.9.0.107 192.33.4.12 128.8.10.90 192.203.230.10 192.5.5.241 192.112.36.4 128.63.2.53 \
192.36.148.17 198.41.0.10 193.0.14.129 198.32.64.12 202.12.27.33"
for i in $ROOTSERV ; do
iptables -A dnserv -p tcp -s $i --dport 53 -j ACCEPT
iptables -A dnserv -p tcp -d $i --dport 53 -j ACCEPT
iptables -A dnserv -p udp -s $i --dport 53 -j ACCEPT
iptables -A dnserv -p udp -d $i --dport 53 -j ACCEPT
iptables -A dnserv -p tcp -s $i --sport 53 -j ACCEPT
iptables -A dnserv -p tcp -d $i --sport 53 -j ACCEPT
iptables -A dnserv -p udp -s $i --sport 53 -j ACCEPT
iptables -A dnserv -p udp -d $i --sport 53 -j ACCEPT
done

#####################
######ICMP RULEZ#####
#####################
ICMPaccept="destination-unreachable source-quench time-exceeded parameter-problem"

for ICMP in $ICMPaccept ; do
$IPT -A icmp_good -p icmp --icmp-type 	$ICMP   -j ACCEPT
done

$IPT -A icmp_good -p icmp --icmp-type   ping    -j ACCEPT
#-m limit --limit 90/m --limit-burst 5 #echo-reply limit#
$IPT -A icmp_good -p icmp --icmp-type   pong    -j ACCEPT
#-m limit --limit 90/m --limit-burst 5 #echo-request limit#

    #FILTER CHAINS ATTRIBUTION IN FORWARD

    $IPT -A FORWARD                                     -j stato	###
    $IPT -A FORWARD					-j dnserv	###
    $IPT -A FORWARD 					-j icmp_good	###
    $IPT -A FORWARD 					-j tcp_flags	###
    $IPT -A FORWARD 	-i lo 				-j ACCEPT 	### Fire 2 All forward

#LAN 2 -> XXX
    	for lanifs in ${LANIF[*]} ; do
		for lanifs1 in ${LANIF[*]} ; do
		$IPT -A FORWARD	-i $lanifs 	-o $lanifs1 	-j lan2lan      ### Lan 2 Lan forward
    		done
	done
	 for lanifs in ${LANIF[*]} ; do
                for wanifs in ${WANIF[*]} ; do
                $IPT -A FORWARD -i $lanifs      -o $wanifs     -j lan2wan      ### Lan 2 Lan forward
                done
    	done
	for lanifs in ${LANIF[*]} ; do
		for dmzifs in ${DMZIF[*]} ; do
		$IPT -A FORWARD	-i $lanifs 	-o $dmzifs 	-j lan2dmz      ### Lan 2 Dmz forward
		done
	done
#WAN 2 -> XXX
	for wanifs in ${WANIF[*]} ; do
		for lanifs in ${LANIF[*]} ; do
		$IPT -A FORWARD -i $wanifs 	-o $lanifs 	-j wan2lan	### Wan 2 Lan forward
		done
	done
	 for wanifs in ${WANIF[*]} ; do
                for dmzifs in ${DMZIF[*]} ; do
    		$IPT -A FORWARD	-i $wanifs 	-o $dmzifs 	-j wan2dmz      ### Wan 2 Dmz forward
    		done
	done
	for wanifs in ${WANIF[*]} ; do
		for wanifs1 in ${WANIF[*]} ; do
		$IPT -A FORWARD	-i $wanifs 	-o $wanifs1	-j wan2wan      ### Wan 2 Wmz forward
		done
	done
#DMZ 2 -> XXX
	for dmzifs in ${DMZIF[*]} ; do
 		for lanifs in ${LANIF[*]} ; do
  		$IPT -A FORWARD -i $dmzifs 	-o $lanifs 	-j dmz2lan	### Dmz 2 Lan forward
		done
	done
	for dmzifs in ${DMZIF[*]} ; do
		for dmzifs1 in ${DMZIF[*]} ; do
		$IPT -A FORWARD	-i $dmzifs 	-o $dmzifs1	-j dmz2dmz      ### Dmz 2 Dmz forward
    		done
	done
	for dmzifs in ${DMZIF[*]} ; do
		for wanifs in ${WANIF[*]} ; do
		$IPT -A FORWARD	-i $dmzifs 	-o $wanifs 	-j dmz2wan      ### Dmz 2 Wan forward
		done
	done

#FILTER CHAINS ATTRIBUTION IN INPUT
    $IPT -A INPUT	                                -j stato	###
    $IPT -A INPUT					-j dnserv	###
    $IPT -A INPUT 					-j icmp_good	###
    $IPT -A INPUT 					-j tcp_flags	###
    $IPT -A INPUT 	-i lo 				-j ACCEPT	###
    for lanifs in ${LANIF[*]} ; do
	$IPT -A INPUT 	-i $lanifs 			-j lan2fw	### Lan input to firewall
    done
    for wanifs in ${WANIF[*]} ; do
	$IPT -A INPUT 	-i $wanifs 			-j wan2fw	### Wan input to firewall
    done
    for dmzifs in ${DMZIF[*]} ; do
    $IPT -A INPUT 	-i $dmzifs			-j dmz2fw	### Dmz input to firewall
    done
    #FILTER CHAINS ATTRIBUTION IN INPUT
    $IPT -A OUTPUT	                                -j stato	###
    $IPT -A OUTPUT					-j dnserv	###
    $IPT -A OUTPUT 					-j icmp_good	###
    $IPT -A OUTPUT 					-j tcp_flags	###
    $IPT -A OUTPUT 	-o lo 				-j ACCEPT	###
    for dmzifs in ${DMZIF[*]} ; do
	$IPT -A OUTPUT      -o $dmzifs			-j fw2dmz     	### Fire output to dmz
    done
    for lanifs in ${LANIF[*]} ; do
	$IPT -A OUTPUT 	    -o $lanifs			-j fw2lan     	### Fire output to lan
    done
    for wanifs in ${WANIF[*]} ; do
    	$IPT -A OUTPUT      -o $WANIF			-j fw2wan     	### Fire output to wan
    done

    #VPN CHAINS ATTRIBUTION
    #VPN 2 -> XXX
    #XXX 2 -> VPN
    for lanifs in ${LANIF[*]} ; do
    	for vpnsif in $VPNIF ; do
    	$IPT -A FORWARD 	-i $lanifs       -o $vpnsif 	-j lan2vpns	###
    	$IPT -A FORWARD 	-i $vpnsif       -o $lanifs 	-j vpns2lan	###
	done
    done
    for dmzifs in ${DMZIF[*]} ; do
	for vpnsif in $VPNIF ; do
	$IPT -A FORWARD 	-i $dmzifs       -o $vpnsif 	-j dmz2vpns	###
        $IPT -A FORWARD 	-i $vpnsif       -o $dmzifs 	-j vpns2dmz	###
	done
    done
    for wanifs in ${WANIF[*]} ; do
	for vpnsif in $VPNIF ; do
    	$IPT -A FORWARD 	-i $wanifs       -o $vpnsif 	-j wan2vpns	###
    	$IPT -A FORWARD 	-i $vpnsif       -o $wanifs 	-j vpns2wan	###
	done
    done

    for vpnsif in $VPNIF ; do
    	$IPT -A INPUT       -i $vpnsif			-j vpns2fw	###
	$IPT -A OUTPUT       		-o $vpnsif	-j fw2vpns	###
    done
    for vpnsif in $VPNIF ; do
    	for vpnsif1 in $VPNIF ; do
    	$IPT -A FORWARD 	-i $vpnsif1        -o $vpnsif 	-j vpns2vpns	###
       	done
    done
#done  #FORSE

#STAR DELLE REGOLE
CHAINS0="lan2wan lan2dmz lan2lan lan2vpns lan2fw \
wan2wan wan2dmz wan2lan wan2vpns wan2fw          \
dmz2wan dmz2dmz dmz2lan dmz2vpns dmz2fw          \
fw2wan fw2dmz fw2lan fw2vpns fw2fw               \
vpns2wan vpns2dmz vpns2lan vpns2vpns vpns2fw     ";

#for CAT0 in $CHAINS0 ; do
#/bin/bash $DIRBIN/filter/$CAT0  "$DIRCONF/filter/$CAT0" "$DIRCONF/firewallo.conf" 
#done
for CAT0 in $CHAINS0 ; do
/bin/bash $DIRBIN/filter/set.filter "$DIRCONF/filter/$CAT0" "$DIRCONF/firewallo.conf" "$CAT0"
done


echo "Firewall setting are finish...                                  ...OK"
}


stop () {
########################################################################
#################################STOP###################################
########################################################################
echo "############## STOP FIREWALL##########"
echo "Flushing policies..." 
$IPT -F
$IPT -X
$IPT -t nat -F
$IPT -t nat -X
$IPT -t filter -F
$IPT -t filter -X
$IPT -t mangle -F
$IPT -t mangle -X


echo "Setting up policies for chains..." 
$IPT -P INPUT 	ACCEPT
$IPT -P FORWARD ACCEPT
$IPT -P OUTPUT 	ACCEPT

$DIRBIN/nat/set.nat

echo "Firewall stopped...                                           ...OK"
echo "##############END STOP################"
}

reset () { 
echo "############## RESET FIREWALL##########"
echo "Flushing policies..." 
$IPT -F
$IPT -X
$IPT -t nat -F
$IPT -t nat -X
$IPT -t filter -F
$IPT -t filter -X
$IPT -t mangle -F
$IPT -t mangle -X


echo "Setting up policies for chains..." 
$IPT -P INPUT 	ACCEPT
$IPT -P FORWARD ACCEPT
$IPT -P OUTPUT 	ACCEPT


echo "Firewall resetted...                                           ...OK"
echo "##############END RESET################"
}


case "$1" in
   'start')
	ctrl_if ""
	printf "\nStarting firewall..."
				#Scrivo quache appunto xchÃ¨ non lo uso frequentemente.
				#>(...) Ã¨ una process substitution che crea un processo secondario.
				#tee /tmp/.check_error copia l'output di errore nel file /tmp/.check_error.
				#>&2 assicura che l'output di tee venga reindirizzato nuovamente a stdout, quindi verrÃ  stampanto in status.log
				#questo per avere l'errore dentro status.log a terminale e anche su .check_error per il red_cross_check.
	start "" > $LOGF 2> >(tee /tmp/.check_error >&1)
	if [ "$?" = "0" ] ; then
	printf "... ok $(green_check_mark)\n"
		#Controlla se ci sono errori nonostante lo start
		CHECK=$(cat /tmp/.check_error)
		if [ "$CHECK" != "" ] ; then
			echo "$(red_cross_mark) Started with configuration errors listed below see Option nÂ°13 for complete Status!"
			color_text "red" "$CHECK"
		fi
	else
	printf "... error $(red_cross_mark)\n"
	fi
;;
   'stop')
	printf "\nTerminating firewall..."
				#Scrivo qualche appunto xchÃ¨ non lo uso frequentemente.
				#>(...) Ã¨ una process substitution che crea un processo secondario.
				#tee /tmp/.check_error copia l'output di errore nel file /tmp/.check_error.
				#>&2 assicura che l'output di tee venga reindirizzato nuovamente a stdout, quindi verrÃ  stampanto in status.log
				#questo per avere l'errore dentro status.log a terminale e anche su .check_error per il red_cross_check.
	stop "" > $LOGF 2> >(tee /tmp/.check_error >&1)
	if [ "$?" = "0" ] ; then
	printf "... ok $(green_check_mark)\n"
		#Controlla se ci sono errori nonostante lo start
		CHECK=$(cat /tmp/.check_error)
		if [ "$CHECK" != "" ] ; then
			echo "$(red_cross_mark) Stopped with configuration errors listed below see Option nÂ°13 for complete Status!"
			color_text "red" "$CHECK"
		fi
	else
	printf "... error $(red_cross_mark)\n"
	fi
;;
    'restart')
    $0 stop  >  $LOGF  2>&1
    $0 start >> $LOGF  2>&1
;;
    'reset')
	printf "\nResetting firewall..."
	reset ""   > $LOGF  2>&1
	printf "... ok $(green_check_mark)\n"
;;
   *)
    printf "usage $0 start|stop|restart|reset" ;;
esac